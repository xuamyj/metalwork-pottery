- status is basically nav
- score could also be called resources (but between the two i found score LESS confusing)

1. GatherMinigameController script should be dragged to StatusController obj or GatherMinigame obj?
2. I imagine StartGatherMinigame to hide PLAY button and show E C G CONTINUE buttons. I imagine E C G buttons to be hooked to genRandomExp(), genRandomClay(), and genRandomGold() respectively. And then I imagine CONTINUE button to move you to the main screen (so like, StatusController.GoToWorld(WorldStatus.Main) ) and also show PLAY button / hide E C G CONTINUE for when you come back. I could definitely set this up with Canvas buttons but the whole point is to make scaffolding for the "Gather minigame world" not like just a "Gather minigame screen" if that makes sense
3. Right now my biggest problem is that my OnTapPerfomed lives in my StatusController and I don't know how to like.. "transition" it to a GatherMinigameOnTapPerformed function when I'm in WorldStatus.Gather. Actually I don't want to "transition" it completely, as it also allows me to do the navs (like click on Quests Inventory Settings X etc). But I feel it would be WEIRD to have an extremely long and complex thing in StatusController.OnTapPerformed() that fiddles with GatherMinigame (AND all other minigame worlds) AND itself
4. On top of that, my navs work because every clickable nav has either a ScreenNavId or WorldNavId attached to it. So is it normal to be (i) adding BoxCollider2D, and then (ii) making "id" scripts, and then (iii) picking it up inside OnTapPerfomed, for EVERYTHING that can be tapped? From prev game experience it seems that (i) is perfectly reasonable, (ii) is an ok way to do it but maybe there's a better way (like how you showed me layers vs order in layer), and (iii) seems the more dubious the more I think about it
